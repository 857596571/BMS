package ${package}.modules.${module}.controller;

import java.util.List;
import java.util.Map;
import com.alibaba.dubbo.config.annotation.Reference;
import com.common.api.Paging;
import com.common.utils.http.ResponseMessage;
import com.common.utils.http.Result;
import com.common.web.controller.BaseController;
import com.github.pagehelper.PageInfo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import io.swagger.annotations.*;
import ${package}.modules.${module}.entity.${className};
import ${package}.modules.${module}.service.${className}Service;



/**
 * ${comments}
 * 
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@Api(description = "${comments}接口")
@Validated
@RestController
@RequestMapping("/${pathName}")
public class ${className}Controller extends BaseController {
    @Reference
	private ${className}Service ${classname}Service;
	
	/**
	 * 列表
	 */
    @ApiOperation(value = "${comments}分页列表")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "请求已完成"),
            @ApiResponse(code = 400, message = "请求中有语法问题，或不能满足请求"),
            @ApiResponse(code = 401, message = "未授权客户机访问数据"),
            @ApiResponse(code = 404, message = "服务器找不到给定的资源；文档不存在"),
            @ApiResponse(code = 500, message = "服务器不能完成请求")}
    )
    @ApiImplicitParams({
            // Filter Param
            @ApiImplicitParam(name = "query", value = "查询条件", paramType = "query", dataType = "Map"),
            // Paging Param
            @ApiImplicitParam(name = "pageNumber", value = "当前页（从0开始）", paramType = "query", dataType = "int", required = true),
            @ApiImplicitParam(name = "pageSize", value = "每页显示记录数", paramType = "query", dataType = "int", required = true)
    })
	@GetMapping("/list")
	@PreAuthorize("hasAuthority('${pathName}:list')")
	public ResponseMessage<PageInfo<${className}>> list(Paging page, Map<String, Object> query){
        return Result.success(${classname}Service.findPage(page, query));
	}
	
	
	/**
	 * 信息
	 */
    @ApiOperation(value = "${comments}信息详情")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "请求已完成"),
            @ApiResponse(code = 400, message = "请求中有语法问题，或不能满足请求"),
            @ApiResponse(code = 401, message = "未授权客户机访问数据"),
            @ApiResponse(code = 404, message = "服务器找不到给定的资源；文档不存在"),
            @ApiResponse(code = 500, message = "服务器不能完成请求")}
    )
    @ApiImplicitParams({
            @ApiImplicitParam(name = "${pk.attrType} ${pk.attrname}", value = "主键", paramType = "query", dataType = "${pk.attrType}"),
    })
	@GetMapping("/info/{${pk.attrname}}")
	@PreAuthorize("hasAuthority('${pathName}:info')")
	public ResponseMessage<${className}> info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
        return Result.success(${classname}Service.get(${pk.attrname}));
	}
	
	/**
	 * 保存
	 */
    @ApiOperation(value = "添加修改${comments}信息")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "请求已完成"),
            @ApiResponse(code = 400, message = "请求中有语法问题，或不能满足请求"),
            @ApiResponse(code = 401, message = "未授权客户机访问数据"),
            @ApiResponse(code = 404, message = "服务器找不到给定的资源；文档不存在"),
            @ApiResponse(code = 500, message = "服务器不能完成请求")}
    )
	@PostMapping("/save")
	@PreAuthorize("hasAuthority('${pathName}:save')")
	public ResponseMessage<${className}> save(@RequestBody ${className} ${classname}){
        return	Result.success(${classname}Service.save(${classname}));
	}
	
	/**
	 * 删除
	 */
    @ApiOperation(value = "删除某条${comments}信息")
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "请求已完成"),
            @ApiResponse(code = 400, message = "请求中有语法问题，或不能满足请求"),
            @ApiResponse(code = 401, message = "未授权客户机访问数据"),
            @ApiResponse(code = 404, message = "服务器找不到给定的资源；文档不存在"),
            @ApiResponse(code = 500, message = "服务器不能完成请求")}
    )
	@DeleteMapping("/delete/{${pk.attrname}}")
	@PreAuthorize("hasAuthority('${pathName}:delete')")
	public ResponseMessage delete(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}){
		${classname}Service.deleteById(${pk.attrname});
        return Result.success();
	}
	
}
